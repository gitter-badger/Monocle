// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Total is an object representing the database table.
type Total struct {
	ID           uint64    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Characters   uint64    `db:"characters" boil:"characters" json:"characters" toml:"characters" yaml:"characters"`
	Corporations uint64    `db:"corporations" boil:"corporations" json:"corporations" toml:"corporations" yaml:"corporations"`
	Alliances    uint64    `db:"alliances" boil:"alliances" json:"alliances" toml:"alliances" yaml:"alliances"`
	CreatedAt    time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *totalR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L totalL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TotalColumns = struct {
	ID           string
	Characters   string
	Corporations string
	Alliances    string
	CreatedAt    string
}{
	ID:           "id",
	Characters:   "characters",
	Corporations: "corporations",
	Alliances:    "alliances",
	CreatedAt:    "created_at",
}

// Generated where

var TotalWhere = struct {
	ID           whereHelperuint64
	Characters   whereHelperuint64
	Corporations whereHelperuint64
	Alliances    whereHelperuint64
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperuint64{field: "`totals`.`id`"},
	Characters:   whereHelperuint64{field: "`totals`.`characters`"},
	Corporations: whereHelperuint64{field: "`totals`.`corporations`"},
	Alliances:    whereHelperuint64{field: "`totals`.`alliances`"},
	CreatedAt:    whereHelpertime_Time{field: "`totals`.`created_at`"},
}

// TotalRels is where relationship names are stored.
var TotalRels = struct {
}{}

// totalR is where relationships are stored.
type totalR struct {
}

// NewStruct creates a new relationship struct
func (*totalR) NewStruct() *totalR {
	return &totalR{}
}

// totalL is where Load methods for each relationship are stored.
type totalL struct{}

var (
	totalAllColumns            = []string{"id", "characters", "corporations", "alliances", "created_at"}
	totalColumnsWithoutDefault = []string{"created_at"}
	totalColumnsWithDefault    = []string{"id", "characters", "corporations", "alliances"}
	totalPrimaryKeyColumns     = []string{"id"}
)

type (
	// TotalSlice is an alias for a slice of pointers to Total.
	// This should generally be used opposed to []Total.
	TotalSlice []*Total

	totalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	totalType                 = reflect.TypeOf(&Total{})
	totalMapping              = queries.MakeStructMapping(totalType)
	totalPrimaryKeyMapping, _ = queries.BindMapping(totalType, totalMapping, totalPrimaryKeyColumns)
	totalInsertCacheMut       sync.RWMutex
	totalInsertCache          = make(map[string]insertCache)
	totalUpdateCacheMut       sync.RWMutex
	totalUpdateCache          = make(map[string]updateCache)
	totalUpsertCacheMut       sync.RWMutex
	totalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single total record from the query.
func (q totalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Total, error) {
	o := &Total{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for totals")
	}

	return o, nil
}

// All returns all Total records from the query.
func (q totalQuery) All(ctx context.Context, exec boil.ContextExecutor) (TotalSlice, error) {
	var o []*Total

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Total slice")
	}

	return o, nil
}

// Count returns the count of all Total records in the query.
func (q totalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count totals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q totalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if totals exists")
	}

	return count > 0, nil
}

// Totals retrieves all the records using an executor.
func Totals(mods ...qm.QueryMod) totalQuery {
	mods = append(mods, qm.From("`totals`"))
	return totalQuery{NewQuery(mods...)}
}

// FindTotal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTotal(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*Total, error) {
	totalObj := &Total{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `totals` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, totalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from totals")
	}

	return totalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Total) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no totals provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(totalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	totalInsertCacheMut.RLock()
	cache, cached := totalInsertCache[key]
	totalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			totalAllColumns,
			totalColumnsWithDefault,
			totalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(totalType, totalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(totalType, totalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `totals` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `totals` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `totals` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, totalPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into totals")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == totalMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for totals")
	}

CacheNoHooks:
	if !cached {
		totalInsertCacheMut.Lock()
		totalInsertCache[key] = cache
		totalInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Total.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Total) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	totalUpdateCacheMut.RLock()
	cache, cached := totalUpdateCache[key]
	totalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			totalAllColumns,
			totalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("boiler: unable to update totals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `totals` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, totalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(totalType, totalMapping, append(wl, totalPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to update totals row")
	}

	if !cached {
		totalUpdateCacheMut.Lock()
		totalUpdateCache[key] = cache
		totalUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q totalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to update all for totals")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TotalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), totalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `totals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, totalPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to update all in total slice")
	}

	return nil
}

var mySQLTotalUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Total) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no totals provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(totalColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTotalUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	totalUpsertCacheMut.RLock()
	cache, cached := totalUpsertCache[key]
	totalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			totalAllColumns,
			totalColumnsWithDefault,
			totalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			totalAllColumns,
			totalPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert totals, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "totals", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `totals` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(totalType, totalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(totalType, totalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for totals")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == totalMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(totalType, totalMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for totals")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for totals")
	}

CacheNoHooks:
	if !cached {
		totalUpsertCacheMut.Lock()
		totalUpsertCache[key] = cache
		totalUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Total record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Total) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("boiler: no Total provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), totalPrimaryKeyMapping)
	sql := "DELETE FROM `totals` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to delete from totals")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q totalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("boiler: no totalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to delete all from totals")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TotalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), totalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `totals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, totalPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to delete all from total slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Total) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTotal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TotalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TotalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), totalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `totals`.* FROM `totals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, totalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TotalSlice")
	}

	*o = slice

	return nil
}

// TotalExists checks if the Total row exists.
func TotalExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `totals` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if totals exists")
	}

	return exists, nil
}
