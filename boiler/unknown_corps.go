// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UnknownCorp is an object representing the database table.
type UnknownCorp struct {
	ID uint64 `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`

	R *unknownCorpR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L unknownCorpL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UnknownCorpColumns = struct {
	ID string
}{
	ID: "id",
}

// Generated where

var UnknownCorpWhere = struct {
	ID whereHelperuint64
}{
	ID: whereHelperuint64{field: "`unknown_corps`.`id`"},
}

// UnknownCorpRels is where relationship names are stored.
var UnknownCorpRels = struct {
}{}

// unknownCorpR is where relationships are stored.
type unknownCorpR struct {
}

// NewStruct creates a new relationship struct
func (*unknownCorpR) NewStruct() *unknownCorpR {
	return &unknownCorpR{}
}

// unknownCorpL is where Load methods for each relationship are stored.
type unknownCorpL struct{}

var (
	unknownCorpAllColumns            = []string{"id"}
	unknownCorpColumnsWithoutDefault = []string{"id"}
	unknownCorpColumnsWithDefault    = []string{}
	unknownCorpPrimaryKeyColumns     = []string{"id"}
)

type (
	// UnknownCorpSlice is an alias for a slice of pointers to UnknownCorp.
	// This should generally be used opposed to []UnknownCorp.
	UnknownCorpSlice []*UnknownCorp
	// UnknownCorpHook is the signature for custom UnknownCorp hook methods
	UnknownCorpHook func(context.Context, boil.ContextExecutor, *UnknownCorp) error

	unknownCorpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	unknownCorpType                 = reflect.TypeOf(&UnknownCorp{})
	unknownCorpMapping              = queries.MakeStructMapping(unknownCorpType)
	unknownCorpPrimaryKeyMapping, _ = queries.BindMapping(unknownCorpType, unknownCorpMapping, unknownCorpPrimaryKeyColumns)
	unknownCorpInsertCacheMut       sync.RWMutex
	unknownCorpInsertCache          = make(map[string]insertCache)
	unknownCorpUpdateCacheMut       sync.RWMutex
	unknownCorpUpdateCache          = make(map[string]updateCache)
	unknownCorpUpsertCacheMut       sync.RWMutex
	unknownCorpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var unknownCorpBeforeInsertHooks []UnknownCorpHook
var unknownCorpBeforeUpdateHooks []UnknownCorpHook
var unknownCorpBeforeDeleteHooks []UnknownCorpHook
var unknownCorpBeforeUpsertHooks []UnknownCorpHook

var unknownCorpAfterInsertHooks []UnknownCorpHook
var unknownCorpAfterSelectHooks []UnknownCorpHook
var unknownCorpAfterUpdateHooks []UnknownCorpHook
var unknownCorpAfterDeleteHooks []UnknownCorpHook
var unknownCorpAfterUpsertHooks []UnknownCorpHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UnknownCorp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UnknownCorp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UnknownCorp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UnknownCorp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UnknownCorp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UnknownCorp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UnknownCorp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UnknownCorp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UnknownCorp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range unknownCorpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUnknownCorpHook registers your hook function for all future operations.
func AddUnknownCorpHook(hookPoint boil.HookPoint, unknownCorpHook UnknownCorpHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		unknownCorpBeforeInsertHooks = append(unknownCorpBeforeInsertHooks, unknownCorpHook)
	case boil.BeforeUpdateHook:
		unknownCorpBeforeUpdateHooks = append(unknownCorpBeforeUpdateHooks, unknownCorpHook)
	case boil.BeforeDeleteHook:
		unknownCorpBeforeDeleteHooks = append(unknownCorpBeforeDeleteHooks, unknownCorpHook)
	case boil.BeforeUpsertHook:
		unknownCorpBeforeUpsertHooks = append(unknownCorpBeforeUpsertHooks, unknownCorpHook)
	case boil.AfterInsertHook:
		unknownCorpAfterInsertHooks = append(unknownCorpAfterInsertHooks, unknownCorpHook)
	case boil.AfterSelectHook:
		unknownCorpAfterSelectHooks = append(unknownCorpAfterSelectHooks, unknownCorpHook)
	case boil.AfterUpdateHook:
		unknownCorpAfterUpdateHooks = append(unknownCorpAfterUpdateHooks, unknownCorpHook)
	case boil.AfterDeleteHook:
		unknownCorpAfterDeleteHooks = append(unknownCorpAfterDeleteHooks, unknownCorpHook)
	case boil.AfterUpsertHook:
		unknownCorpAfterUpsertHooks = append(unknownCorpAfterUpsertHooks, unknownCorpHook)
	}
}

// One returns a single unknownCorp record from the query.
func (q unknownCorpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UnknownCorp, error) {
	o := &UnknownCorp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for unknown_corps")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UnknownCorp records from the query.
func (q unknownCorpQuery) All(ctx context.Context, exec boil.ContextExecutor) (UnknownCorpSlice, error) {
	var o []*UnknownCorp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UnknownCorp slice")
	}

	if len(unknownCorpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UnknownCorp records in the query.
func (q unknownCorpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count unknown_corps rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q unknownCorpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if unknown_corps exists")
	}

	return count > 0, nil
}

// UnknownCorps retrieves all the records using an executor.
func UnknownCorps(mods ...qm.QueryMod) unknownCorpQuery {
	mods = append(mods, qm.From("`unknown_corps`"))
	return unknownCorpQuery{NewQuery(mods...)}
}

// FindUnknownCorp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUnknownCorp(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*UnknownCorp, error) {
	unknownCorpObj := &UnknownCorp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `unknown_corps` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, unknownCorpObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from unknown_corps")
	}

	return unknownCorpObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UnknownCorp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no unknown_corps provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unknownCorpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	unknownCorpInsertCacheMut.RLock()
	cache, cached := unknownCorpInsertCache[key]
	unknownCorpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			unknownCorpAllColumns,
			unknownCorpColumnsWithDefault,
			unknownCorpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(unknownCorpType, unknownCorpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(unknownCorpType, unknownCorpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `unknown_corps` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `unknown_corps` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `unknown_corps` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, unknownCorpPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into unknown_corps")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for unknown_corps")
	}

CacheNoHooks:
	if !cached {
		unknownCorpInsertCacheMut.Lock()
		unknownCorpInsertCache[key] = cache
		unknownCorpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UnknownCorp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UnknownCorp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	unknownCorpUpdateCacheMut.RLock()
	cache, cached := unknownCorpUpdateCache[key]
	unknownCorpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			unknownCorpAllColumns,
			unknownCorpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update unknown_corps, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `unknown_corps` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, unknownCorpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(unknownCorpType, unknownCorpMapping, append(wl, unknownCorpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update unknown_corps row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for unknown_corps")
	}

	if !cached {
		unknownCorpUpdateCacheMut.Lock()
		unknownCorpUpdateCache[key] = cache
		unknownCorpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q unknownCorpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for unknown_corps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for unknown_corps")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UnknownCorpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unknownCorpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `unknown_corps` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unknownCorpPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in unknownCorp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all unknownCorp")
	}
	return rowsAff, nil
}

var mySQLUnknownCorpUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UnknownCorp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no unknown_corps provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(unknownCorpColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUnknownCorpUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	unknownCorpUpsertCacheMut.RLock()
	cache, cached := unknownCorpUpsertCache[key]
	unknownCorpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			unknownCorpAllColumns,
			unknownCorpColumnsWithDefault,
			unknownCorpColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			unknownCorpAllColumns,
			unknownCorpPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert unknown_corps, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "unknown_corps", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `unknown_corps` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(unknownCorpType, unknownCorpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(unknownCorpType, unknownCorpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for unknown_corps")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(unknownCorpType, unknownCorpMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for unknown_corps")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for unknown_corps")
	}

CacheNoHooks:
	if !cached {
		unknownCorpUpsertCacheMut.Lock()
		unknownCorpUpsertCache[key] = cache
		unknownCorpUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UnknownCorp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UnknownCorp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UnknownCorp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), unknownCorpPrimaryKeyMapping)
	sql := "DELETE FROM `unknown_corps` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from unknown_corps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for unknown_corps")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q unknownCorpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no unknownCorpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from unknown_corps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for unknown_corps")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UnknownCorpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(unknownCorpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unknownCorpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `unknown_corps` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unknownCorpPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from unknownCorp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for unknown_corps")
	}

	if len(unknownCorpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UnknownCorp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUnknownCorp(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnknownCorpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UnknownCorpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unknownCorpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `unknown_corps`.* FROM `unknown_corps` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unknownCorpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UnknownCorpSlice")
	}

	*o = slice

	return nil
}

// UnknownCorpExists checks if the UnknownCorp row exists.
func UnknownCorpExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `unknown_corps` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if unknown_corps exists")
	}

	return exists, nil
}
