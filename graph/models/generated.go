// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/ddouglas/monocle"
)

type AllianceHistory struct {
	ID         int               `json:"id"`
	RecordID   int               `json:"recordID"`
	AllianceID *int              `json:"allianceID"`
	Alliance   *monocle.Alliance `json:"alliance"`
	StartDate  time.Time         `json:"startDate"`
}

type CorporationHistory struct {
	ID            int                  `json:"id"`
	RecordID      int                  `json:"recordID"`
	CorporationID int                  `json:"corporationID"`
	StartDate     int                  `json:"startDate"`
	Corporation   *monocle.Corporation `json:"corporation"`
}

type Sort string

const (
	SortAsc  Sort = "ASC"
	SortDesc Sort = "DESC"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortAsc, SortDesc:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
