// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CorporationDeltas is an object representing the database table.
type CorporationDeltas struct {
	ID            uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CorporationID uint64 `boil:"corporation_id" json:"corporation_id" toml:"corporation_id" yaml:"corporation_id"`
	MemberCount   uint64 `boil:"member_count" json:"member_count" toml:"member_count" yaml:"member_count"`
	CreatedAt     uint64 `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *corporationDeltasR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L corporationDeltasL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CorporationDeltasColumns = struct {
	ID            string
	CorporationID string
	MemberCount   string
	CreatedAt     string
}{
	ID:            "id",
	CorporationID: "corporation_id",
	MemberCount:   "member_count",
	CreatedAt:     "created_at",
}

// Generated where

var CorporationDeltasWhere = struct {
	ID            whereHelperuint64
	CorporationID whereHelperuint64
	MemberCount   whereHelperuint64
	CreatedAt     whereHelperuint64
}{
	ID:            whereHelperuint64{field: "`corporation_deltas`.`id`"},
	CorporationID: whereHelperuint64{field: "`corporation_deltas`.`corporation_id`"},
	MemberCount:   whereHelperuint64{field: "`corporation_deltas`.`member_count`"},
	CreatedAt:     whereHelperuint64{field: "`corporation_deltas`.`created_at`"},
}

// CorporationDeltasRels is where relationship names are stored.
var CorporationDeltasRels = struct {
}{}

// corporationDeltasR is where relationships are stored.
type corporationDeltasR struct {
}

// NewStruct creates a new relationship struct
func (*corporationDeltasR) NewStruct() *corporationDeltasR {
	return &corporationDeltasR{}
}

// corporationDeltasL is where Load methods for each relationship are stored.
type corporationDeltasL struct{}

var (
	corporationDeltasAllColumns            = []string{"id", "corporation_id", "member_count", "created_at"}
	corporationDeltasColumnsWithoutDefault = []string{"corporation_id", "member_count", "created_at"}
	corporationDeltasColumnsWithDefault    = []string{"id"}
	corporationDeltasPrimaryKeyColumns     = []string{"id"}
)

type (
	// CorporationDeltasSlice is an alias for a slice of pointers to CorporationDeltas.
	// This should generally be used opposed to []CorporationDeltas.
	CorporationDeltasSlice []*CorporationDeltas
	// CorporationDeltasHook is the signature for custom CorporationDeltas hook methods
	CorporationDeltasHook func(context.Context, boil.ContextExecutor, *CorporationDeltas) error

	corporationDeltasQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	corporationDeltasType                 = reflect.TypeOf(&CorporationDeltas{})
	corporationDeltasMapping              = queries.MakeStructMapping(corporationDeltasType)
	corporationDeltasPrimaryKeyMapping, _ = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, corporationDeltasPrimaryKeyColumns)
	corporationDeltasInsertCacheMut       sync.RWMutex
	corporationDeltasInsertCache          = make(map[string]insertCache)
	corporationDeltasUpdateCacheMut       sync.RWMutex
	corporationDeltasUpdateCache          = make(map[string]updateCache)
	corporationDeltasUpsertCacheMut       sync.RWMutex
	corporationDeltasUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var corporationDeltasBeforeInsertHooks []CorporationDeltasHook
var corporationDeltasBeforeUpdateHooks []CorporationDeltasHook
var corporationDeltasBeforeDeleteHooks []CorporationDeltasHook
var corporationDeltasBeforeUpsertHooks []CorporationDeltasHook

var corporationDeltasAfterInsertHooks []CorporationDeltasHook
var corporationDeltasAfterSelectHooks []CorporationDeltasHook
var corporationDeltasAfterUpdateHooks []CorporationDeltasHook
var corporationDeltasAfterDeleteHooks []CorporationDeltasHook
var corporationDeltasAfterUpsertHooks []CorporationDeltasHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CorporationDeltas) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CorporationDeltas) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CorporationDeltas) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CorporationDeltas) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CorporationDeltas) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CorporationDeltas) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CorporationDeltas) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CorporationDeltas) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CorporationDeltas) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range corporationDeltasAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCorporationDeltasHook registers your hook function for all future operations.
func AddCorporationDeltasHook(hookPoint boil.HookPoint, corporationDeltasHook CorporationDeltasHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		corporationDeltasBeforeInsertHooks = append(corporationDeltasBeforeInsertHooks, corporationDeltasHook)
	case boil.BeforeUpdateHook:
		corporationDeltasBeforeUpdateHooks = append(corporationDeltasBeforeUpdateHooks, corporationDeltasHook)
	case boil.BeforeDeleteHook:
		corporationDeltasBeforeDeleteHooks = append(corporationDeltasBeforeDeleteHooks, corporationDeltasHook)
	case boil.BeforeUpsertHook:
		corporationDeltasBeforeUpsertHooks = append(corporationDeltasBeforeUpsertHooks, corporationDeltasHook)
	case boil.AfterInsertHook:
		corporationDeltasAfterInsertHooks = append(corporationDeltasAfterInsertHooks, corporationDeltasHook)
	case boil.AfterSelectHook:
		corporationDeltasAfterSelectHooks = append(corporationDeltasAfterSelectHooks, corporationDeltasHook)
	case boil.AfterUpdateHook:
		corporationDeltasAfterUpdateHooks = append(corporationDeltasAfterUpdateHooks, corporationDeltasHook)
	case boil.AfterDeleteHook:
		corporationDeltasAfterDeleteHooks = append(corporationDeltasAfterDeleteHooks, corporationDeltasHook)
	case boil.AfterUpsertHook:
		corporationDeltasAfterUpsertHooks = append(corporationDeltasAfterUpsertHooks, corporationDeltasHook)
	}
}

// One returns a single corporationDeltas record from the query.
func (q corporationDeltasQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CorporationDeltas, error) {
	o := &CorporationDeltas{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for corporation_deltas")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CorporationDeltas records from the query.
func (q corporationDeltasQuery) All(ctx context.Context, exec boil.ContextExecutor) (CorporationDeltasSlice, error) {
	var o []*CorporationDeltas

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CorporationDeltas slice")
	}

	if len(corporationDeltasAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CorporationDeltas records in the query.
func (q corporationDeltasQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count corporation_deltas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q corporationDeltasQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if corporation_deltas exists")
	}

	return count > 0, nil
}

// CorporationDeltas retrieves all the records using an executor.
func CorporationDeltas(mods ...qm.QueryMod) corporationDeltasQuery {
	mods = append(mods, qm.From("`corporation_deltas`"))
	return corporationDeltasQuery{NewQuery(mods...)}
}

// FindCorporationDeltas retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCorporationDeltas(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*CorporationDeltas, error) {
	corporationDeltasObj := &CorporationDeltas{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `corporation_deltas` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, corporationDeltasObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from corporation_deltas")
	}

	return corporationDeltasObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CorporationDeltas) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no corporation_deltas provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(corporationDeltasColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	corporationDeltasInsertCacheMut.RLock()
	cache, cached := corporationDeltasInsertCache[key]
	corporationDeltasInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			corporationDeltasAllColumns,
			corporationDeltasColumnsWithDefault,
			corporationDeltasColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `corporation_deltas` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `corporation_deltas` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `corporation_deltas` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, corporationDeltasPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into corporation_deltas")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == corporationDeltasMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for corporation_deltas")
	}

CacheNoHooks:
	if !cached {
		corporationDeltasInsertCacheMut.Lock()
		corporationDeltasInsertCache[key] = cache
		corporationDeltasInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CorporationDeltas.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CorporationDeltas) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	corporationDeltasUpdateCacheMut.RLock()
	cache, cached := corporationDeltasUpdateCache[key]
	corporationDeltasUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			corporationDeltasAllColumns,
			corporationDeltasPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update corporation_deltas, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `corporation_deltas` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, corporationDeltasPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, append(wl, corporationDeltasPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update corporation_deltas row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for corporation_deltas")
	}

	if !cached {
		corporationDeltasUpdateCacheMut.Lock()
		corporationDeltasUpdateCache[key] = cache
		corporationDeltasUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q corporationDeltasQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for corporation_deltas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for corporation_deltas")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CorporationDeltasSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), corporationDeltasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `corporation_deltas` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, corporationDeltasPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in corporationDeltas slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all corporationDeltas")
	}
	return rowsAff, nil
}

var mySQLCorporationDeltasUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CorporationDeltas) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no corporation_deltas provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(corporationDeltasColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCorporationDeltasUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	corporationDeltasUpsertCacheMut.RLock()
	cache, cached := corporationDeltasUpsertCache[key]
	corporationDeltasUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			corporationDeltasAllColumns,
			corporationDeltasColumnsWithDefault,
			corporationDeltasColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			corporationDeltasAllColumns,
			corporationDeltasPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert corporation_deltas, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "corporation_deltas", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `corporation_deltas` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for corporation_deltas")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == corporationDeltasMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(corporationDeltasType, corporationDeltasMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for corporation_deltas")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for corporation_deltas")
	}

CacheNoHooks:
	if !cached {
		corporationDeltasUpsertCacheMut.Lock()
		corporationDeltasUpsertCache[key] = cache
		corporationDeltasUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CorporationDeltas record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CorporationDeltas) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CorporationDeltas provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), corporationDeltasPrimaryKeyMapping)
	sql := "DELETE FROM `corporation_deltas` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from corporation_deltas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for corporation_deltas")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q corporationDeltasQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no corporationDeltasQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from corporation_deltas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for corporation_deltas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CorporationDeltasSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(corporationDeltasBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), corporationDeltasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `corporation_deltas` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, corporationDeltasPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from corporationDeltas slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for corporation_deltas")
	}

	if len(corporationDeltasAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CorporationDeltas) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCorporationDeltas(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CorporationDeltasSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CorporationDeltasSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), corporationDeltasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `corporation_deltas`.* FROM `corporation_deltas` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, corporationDeltasPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CorporationDeltasSlice")
	}

	*o = slice

	return nil
}

// CorporationDeltasExists checks if the CorporationDeltas row exists.
func CorporationDeltasExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `corporation_deltas` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if corporation_deltas exists")
	}

	return exists, nil
}
